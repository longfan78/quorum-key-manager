// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "github.com/longfan78/quorum-key-manager/src/auth/entities"
	entities0 "github.com/longfan78/quorum-key-manager/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistries is a mock of Registries interface
type MockRegistries struct {
	ctrl     *gomock.Controller
	recorder *MockRegistriesMockRecorder
}

// MockRegistriesMockRecorder is the mock recorder for MockRegistries
type MockRegistriesMockRecorder struct {
	mock *MockRegistries
}

// NewMockRegistries creates a new mock instance
func NewMockRegistries(ctrl *gomock.Controller) *MockRegistries {
	mock := &MockRegistries{ctrl: ctrl}
	mock.recorder = &MockRegistriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistries) EXPECT() *MockRegistriesMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRegistries) Create(ctx context.Context, name string, allowedTenants []string, userInfo *entities.UserInfo) (*entities0.AliasRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, allowedTenants, userInfo)
	ret0, _ := ret[0].(*entities0.AliasRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRegistriesMockRecorder) Create(ctx, name, allowedTenants, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistries)(nil).Create), ctx, name, allowedTenants, userInfo)
}

// Get mocks base method
func (m *MockRegistries) Get(ctx context.Context, name string, userInfo *entities.UserInfo) (*entities0.AliasRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, userInfo)
	ret0, _ := ret[0].(*entities0.AliasRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRegistriesMockRecorder) Get(ctx, name, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistries)(nil).Get), ctx, name, userInfo)
}

// Delete mocks base method
func (m *MockRegistries) Delete(ctx context.Context, name string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRegistriesMockRecorder) Delete(ctx, name, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistries)(nil).Delete), ctx, name, userInfo)
}

// MockAliases is a mock of Aliases interface
type MockAliases struct {
	ctrl     *gomock.Controller
	recorder *MockAliasesMockRecorder
}

// MockAliasesMockRecorder is the mock recorder for MockAliases
type MockAliasesMockRecorder struct {
	mock *MockAliases
}

// NewMockAliases creates a new mock instance
func NewMockAliases(ctrl *gomock.Controller) *MockAliases {
	mock := &MockAliases{ctrl: ctrl}
	mock.recorder = &MockAliasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAliases) EXPECT() *MockAliasesMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAliases) Create(ctx context.Context, registry, key, kind string, value interface{}, userInfo *entities.UserInfo) (*entities0.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, registry, key, kind, value, userInfo)
	ret0, _ := ret[0].(*entities0.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAliasesMockRecorder) Create(ctx, registry, key, kind, value, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAliases)(nil).Create), ctx, registry, key, kind, value, userInfo)
}

// Get mocks base method
func (m *MockAliases) Get(ctx context.Context, registry, key string, userInfo *entities.UserInfo) (*entities0.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, registry, key, userInfo)
	ret0, _ := ret[0].(*entities0.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAliasesMockRecorder) Get(ctx, registry, key, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAliases)(nil).Get), ctx, registry, key, userInfo)
}

// Update mocks base method
func (m *MockAliases) Update(ctx context.Context, registry, key, kind string, value interface{}, userInfo *entities.UserInfo) (*entities0.Alias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, registry, key, kind, value, userInfo)
	ret0, _ := ret[0].(*entities0.Alias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockAliasesMockRecorder) Update(ctx, registry, key, kind, value, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAliases)(nil).Update), ctx, registry, key, kind, value, userInfo)
}

// Delete mocks base method
func (m *MockAliases) Delete(ctx context.Context, registry, key string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, registry, key, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAliasesMockRecorder) Delete(ctx, registry, key, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAliases)(nil).Delete), ctx, registry, key, userInfo)
}

// Parse mocks base method
func (m *MockAliases) Parse(alias string) (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse
func (mr *MockAliasesMockRecorder) Parse(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockAliases)(nil).Parse), alias)
}

// Replace mocks base method
func (m *MockAliases) Replace(ctx context.Context, addrs []string, userInfo *entities.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", ctx, addrs, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace
func (mr *MockAliasesMockRecorder) Replace(ctx, addrs, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockAliases)(nil).Replace), ctx, addrs, userInfo)
}

// ReplaceSimple mocks base method
func (m *MockAliases) ReplaceSimple(ctx context.Context, addr string, userInfo *entities.UserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceSimple", ctx, addr, userInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceSimple indicates an expected call of ReplaceSimple
func (mr *MockAliasesMockRecorder) ReplaceSimple(ctx, addr, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceSimple", reflect.TypeOf((*MockAliases)(nil).ReplaceSimple), ctx, addr, userInfo)
}
