// Code generated by MockGen. DO NOT EDIT.
// Source: stores.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "github.com/longfan78/quorum-key-manager/src/auth/entities"
	stores "github.com/longfan78/quorum-key-manager/src/stores"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStores is a mock of Stores interface
type MockStores struct {
	ctrl     *gomock.Controller
	recorder *MockStoresMockRecorder
}

// MockStoresMockRecorder is the mock recorder for MockStores
type MockStoresMockRecorder struct {
	mock *MockStores
}

// NewMockStores creates a new mock instance
func NewMockStores(ctrl *gomock.Controller) *MockStores {
	mock := &MockStores{ctrl: ctrl}
	mock.recorder = &MockStoresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStores) EXPECT() *MockStoresMockRecorder {
	return m.recorder
}

// CreateEthereum mocks base method
func (m *MockStores) CreateEthereum(arg0 context.Context, name, keyStore string, allowedTenants []string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEthereum", arg0, name, keyStore, allowedTenants, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEthereum indicates an expected call of CreateEthereum
func (mr *MockStoresMockRecorder) CreateEthereum(arg0, name, keyStore, allowedTenants, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEthereum", reflect.TypeOf((*MockStores)(nil).CreateEthereum), arg0, name, keyStore, allowedTenants, userInfo)
}

// CreateKey mocks base method
func (m *MockStores) CreateKey(arg0 context.Context, name, vault, secretStore string, allowedTenants []string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", arg0, name, vault, secretStore, allowedTenants, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockStoresMockRecorder) CreateKey(arg0, name, vault, secretStore, allowedTenants, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockStores)(nil).CreateKey), arg0, name, vault, secretStore, allowedTenants, userInfo)
}

// CreateSecret mocks base method
func (m *MockStores) CreateSecret(arg0 context.Context, name, vault string, allowedTenants []string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, name, vault, allowedTenants, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockStoresMockRecorder) CreateSecret(arg0, name, vault, allowedTenants, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockStores)(nil).CreateSecret), arg0, name, vault, allowedTenants, userInfo)
}

// ImportEthereum mocks base method
func (m *MockStores) ImportEthereum(ctx context.Context, name string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEthereum", ctx, name, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportEthereum indicates an expected call of ImportEthereum
func (mr *MockStoresMockRecorder) ImportEthereum(ctx, name, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEthereum", reflect.TypeOf((*MockStores)(nil).ImportEthereum), ctx, name, userInfo)
}

// ImportKeys mocks base method
func (m *MockStores) ImportKeys(ctx context.Context, storeName string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportKeys", ctx, storeName, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportKeys indicates an expected call of ImportKeys
func (mr *MockStoresMockRecorder) ImportKeys(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportKeys", reflect.TypeOf((*MockStores)(nil).ImportKeys), ctx, storeName, userInfo)
}

// ImportSecrets mocks base method
func (m *MockStores) ImportSecrets(ctx context.Context, storeName string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSecrets", ctx, storeName, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportSecrets indicates an expected call of ImportSecrets
func (mr *MockStoresMockRecorder) ImportSecrets(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSecrets", reflect.TypeOf((*MockStores)(nil).ImportSecrets), ctx, storeName, userInfo)
}

// Secret mocks base method
func (m *MockStores) Secret(ctx context.Context, storeName string, userInfo *entities.UserInfo) (stores.SecretStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.SecretStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secret indicates an expected call of Secret
func (mr *MockStoresMockRecorder) Secret(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockStores)(nil).Secret), ctx, storeName, userInfo)
}

// Key mocks base method
func (m *MockStores) Key(ctx context.Context, storeName string, userInfo *entities.UserInfo) (stores.KeyStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.KeyStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key
func (mr *MockStoresMockRecorder) Key(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockStores)(nil).Key), ctx, storeName, userInfo)
}

// Ethereum mocks base method
func (m *MockStores) Ethereum(ctx context.Context, storeName string, userInfo *entities.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ethereum", ctx, storeName, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ethereum indicates an expected call of Ethereum
func (mr *MockStoresMockRecorder) Ethereum(ctx, storeName, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ethereum", reflect.TypeOf((*MockStores)(nil).Ethereum), ctx, storeName, userInfo)
}

// EthereumByAddr mocks base method
func (m *MockStores) EthereumByAddr(ctx context.Context, addr common.Address, userInfo *entities.UserInfo) (stores.EthStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthereumByAddr", ctx, addr, userInfo)
	ret0, _ := ret[0].(stores.EthStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthereumByAddr indicates an expected call of EthereumByAddr
func (mr *MockStoresMockRecorder) EthereumByAddr(ctx, addr, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthereumByAddr", reflect.TypeOf((*MockStores)(nil).EthereumByAddr), ctx, addr, userInfo)
}

// List mocks base method
func (m *MockStores) List(ctx context.Context, storeType string, userInfo *entities.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, storeType, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoresMockRecorder) List(ctx, storeType, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStores)(nil).List), ctx, storeType, userInfo)
}

// ListAllAccounts mocks base method
func (m *MockStores) ListAllAccounts(ctx context.Context, userInfo *entities.UserInfo) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAccounts", ctx, userInfo)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAccounts indicates an expected call of ListAllAccounts
func (mr *MockStoresMockRecorder) ListAllAccounts(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAccounts", reflect.TypeOf((*MockStores)(nil).ListAllAccounts), ctx, userInfo)
}
