// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "github.com/longfan78/quorum-key-manager/src/auth/entities"
	proxynode "github.com/longfan78/quorum-key-manager/src/nodes/node/proxy"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodes is a mock of Nodes interface
type MockNodes struct {
	ctrl     *gomock.Controller
	recorder *MockNodesMockRecorder
}

// MockNodesMockRecorder is the mock recorder for MockNodes
type MockNodesMockRecorder struct {
	mock *MockNodes
}

// NewMockNodes creates a new mock instance
func NewMockNodes(ctrl *gomock.Controller) *MockNodes {
	mock := &MockNodes{ctrl: ctrl}
	mock.recorder = &MockNodesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodes) EXPECT() *MockNodesMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNodes) Create(ctx context.Context, name string, config *proxynode.Config, allowedTenants []string, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, config, allowedTenants, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNodesMockRecorder) Create(ctx, name, config, allowedTenants, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodes)(nil).Create), ctx, name, config, allowedTenants, userInfo)
}

// Get mocks base method
func (m *MockNodes) Get(ctx context.Context, name string, userInfo *entities.UserInfo) (*proxynode.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, userInfo)
	ret0, _ := ret[0].(*proxynode.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNodesMockRecorder) Get(ctx, name, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodes)(nil).Get), ctx, name, userInfo)
}

// List mocks base method
func (m *MockNodes) List(ctx context.Context, userInfo *entities.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNodesMockRecorder) List(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodes)(nil).List), ctx, userInfo)
}
