// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock is a generated GoMock package.
package proxynode

import (
	reflect "reflect"

	ethereum "github.com/longfan78/quorum-key-manager/pkg/ethereum"
	jsonrpc "github.com/longfan78/quorum-key-manager/pkg/jsonrpc"
	tessera "github.com/longfan78/quorum-key-manager/pkg/tessera"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ClientPrivTxManager mock base method.
func (m *MockSession) ClientPrivTxManager() tessera.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientPrivTxManager")
	ret0, _ := ret[0].(tessera.Client)
	return ret0
}

// ClientPrivTxManager indicates an expected call of ClientPrivTxManager.
func (mr *MockSessionMockRecorder) ClientPrivTxManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientPrivTxManager", reflect.TypeOf((*MockSession)(nil).ClientPrivTxManager))
}

// ClientRPC mock base method.
func (m *MockSession) ClientRPC() jsonrpc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientRPC")
	ret0, _ := ret[0].(jsonrpc.Client)
	return ret0
}

// ClientRPC indicates an expected call of ClientRPC.
func (mr *MockSessionMockRecorder) ClientRPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientRPC", reflect.TypeOf((*MockSession)(nil).ClientRPC))
}

// EthCaller mock base method.
func (m *MockSession) EthCaller() ethereum.Caller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthCaller")
	ret0, _ := ret[0].(ethereum.Caller)
	return ret0
}

// EthCaller indicates an expected call of EthCaller.
func (mr *MockSessionMockRecorder) EthCaller() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthCaller", reflect.TypeOf((*MockSession)(nil).EthCaller))
}
